Create an API project and change the lauchSettings.json file.

Create a folder called extensions to help us hold extension classes with methods


app.UseForwardedHeaders() will forward proxy headers to the current request in the start up class. 
This will help us during application deployment.

We can set the variable through the command prompt by typing set ASPNETCORE_ENVIRONMENT=Production in 
Windows or export ASPNET_CORE_ENVIRONMENT=Production in Linux.

Reference Contract project in LoggerService and reference LoggerService in CompanyEmployees

By calling the services.AddSingleton method, we can create a service the first time we request 
it and then every subsequent request will call the same instance of the service. This means that all
components share the same service every time they need it and the same instance will be used for every method call.

By calling the services.AddScoped method, we can create a service once per request. That means whenever we send an 
HTTP request to the application, a new instance of the service will be created.

By calling the services.AddTransient method, we can create a service each time the application requests it. This means 
that if multiple components need the service, it will be created again for every single component request.


Dependency injection is a technique we use to achieve the decoupling of objects and their dependencies. It means that rather 
than instantiating an object explicitly in a class every time we need it, we can instantiate it once and then send it to the class.

In a system that is designed around DI, you may find many classes requesting their dependencies via their constructors. 
In this case, it is helpful to have a class that manages and provides dependencies to classes through the constructor.
These classes are referred to as containers or more specifically, Inversion of Control containers. An IoC container is
essentially a factory that is responsible for providing instances of the types that are requested from it.

With the Repository pattern, we create an abstraction layer between the data access and the business logic layer of an application. 
By using it, we are promoting a more loosely coupled approach to access our data in the database.

Also it makes our data access layer testable.

Add-Migration DatabaseCreation
Update-Database

